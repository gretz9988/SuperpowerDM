[{"C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\Home.js":"1","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\index.js":"2","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\reportWebVitals.js":"3","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\App.js":"4","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\OnBoarding.js":"5","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\Login.js":"6","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\cards.js":"7"},{"size":5406,"mtime":1702856239011,"results":"8","hashOfConfig":"9"},{"size":535,"mtime":1700248763602,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1700248763622,"results":"11","hashOfConfig":"9"},{"size":504,"mtime":1701783173202,"results":"12","hashOfConfig":"9"},{"size":11121,"mtime":1702232253874,"results":"13","hashOfConfig":"9"},{"size":4967,"mtime":1702858445516,"results":"14","hashOfConfig":"9"},{"size":21519,"mtime":1703450957575,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"8hrrhs",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\Home.js",["40","41"],[],"import React, { useState } from 'react';\r\nimport CardComponent from './cards.js';\r\nimport './Home.css';\r\nimport './Assets/toggle-switch.css';\r\nimport './Assets/tooltip.css';\r\nimport './Assets/cards.css';\r\n\r\nfunction YourNewPage() {\r\n  const [currentScreen, setCurrentScreen] = useState(1);\r\n  const [fade, setFade] = useState(true);\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [mobilePosition, moveMobilePosition] = useState(false);\r\n  const [mobileButton, setMobileButton] = useState('≡');\r\n  const contentClass = expanded ? 'content-expanded' : 'content-collapsed';\r\n\r\n  const changeScreen = (newScreen) => {\r\n    setTimeout(() => {\r\n      setCurrentScreen(newScreen); // Set the new screen number\r\n    }, 100); // Adjust the timeout duration as needed\r\n  };\r\n\r\n  const mobilePositionChange = () => {\r\n    moveMobilePosition(!mobilePosition);\r\n    setMobileButton(mobileButton === \"≡\" ? \"✖\" : \"≡\");\r\n  }\r\n    \r\n  const renderScreen = () => {\r\n    switch (currentScreen) { // Make sure to use currentScreen instead of screen\r\n      case 1:\r\n        return (\r\n          <div className='content'>\r\n            <div className='content-header'>\r\n              <h2>Dashboard</h2>\r\n            </div>\r\n          </div>\r\n        );        \r\n      case 2:\r\n        return (\r\n          <div className='content'>\r\n            <div className='content-header'>\r\n              <h2>Control Center</h2>\r\n            </div>\r\n            <CardComponent />\r\n          </div>\r\n        );\r\n        case 3:\r\n        return (\r\n          <div className='content'>\r\n            <div className='content-header'>\r\n              <h2>Settings</h2>\r\n            </div>\r\n          </div>\r\n        );\r\n        case 4:\r\n        return (\r\n          <div className='content'>\r\n            <div className='content-header'>\r\n              <h2>Coming Soon!</h2>\r\n            </div>\r\n          </div>\r\n        );\r\n      // ... and so on for the other cases\r\n      default:\r\n        return <div>Something went wrong!</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Background\">\r\n      <div className={contentClass}>\r\n        {renderScreen()}\r\n      </div>\r\n      <button onClick={() => {\r\n          setExpanded(!expanded);\r\n          mobilePositionChange();\r\n        }} \r\n        className={`mobile-only-button ${mobilePosition ? 'newMobilePosition' : ''}`}>\r\n        {mobileButton}\r\n      </button>\r\n      <div className={`sidebar ${expanded ? 'expanded' : ''}`} \r\n           onMouseEnter={() => setExpanded(true)} \r\n           onMouseLeave={() => setExpanded(false)} >\r\n        {expanded ? (\r\n          <>\r\n            <div>\r\n              <img src=\"/Assets/colourFullLogo.png\" alt=\"Logo\" className='side-logo' />\r\n            </div>\r\n            <button onClick={() => changeScreen(1)} className={`sidebar-button ${currentScreen === 1 ? 'active' : ''}`}> \r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n              Dashboard\r\n            </button>\r\n            <button onClick={() => changeScreen(2)} className={`sidebar-button ${currentScreen === 2 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n              Control Centre\r\n            </button>\r\n            <button onClick={() => changeScreen(4)} className={`sidebar-button ${currentScreen === 4 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n              Campaigns (~Coming Soon!)\r\n            </button>\r\n            <button onClick={() => changeScreen(4)} className={`sidebar-button ${currentScreen === 4 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n              Audiences (~Coming Soon!)\r\n            </button>\r\n            <button onClick={() => changeScreen(3)} className=\"button-settings\"> \r\n              <img src=\"/Assets/SettingsIcon.png\" alt=\"Icon\" className=\"button-icon\" />\r\n              Settings\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <img src=\"/Assets/redIcon.png\" alt=\"Logo\" className='side-logo-closed' />\r\n            </div>\r\n            <button onClick={() => changeScreen(1)} className={`sidebar-button ${currentScreen === 1 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeScreen(2)} className={`sidebar-button ${currentScreen === 2 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeScreen(4)} className={`sidebar-button ${currentScreen === 4 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeScreen(4)} className={`sidebar-button ${currentScreen === 4 ? 'active' : ''}`}>\r\n              <img src=\"/Assets/SideButton.png\" alt=\"Icon\" className=\"button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeScreen(3)} className=\"button-settings\"> \r\n              <img src=\"/Assets/SettingsIcon.png\" alt=\"Icon\" className=\"button-icon\" />\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YourNewPage;\r\n","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\index.js",[],[],"C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\reportWebVitals.js",[],[],"C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\App.js",[],[],"C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\OnBoarding.js",["42"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './OnBoarding.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faXTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction OnBoarding() {\r\n  const { userID } = useParams();\r\n  const navigate = useNavigate();\r\n  const [screen, setScreen] = useState(1);\r\n  const [fade, setFade] = useState(true);\r\n\r\n  const renderProgressBar = () => {\r\n    return (\r\n      <div className=\"progress-bar\">\r\n        <img src=\"/Assets/onboarding_1.png\" alt=\"Step 1\" className={screen === 1 ? 'active' : ''} />\r\n        <img src=\"/Assets/onboarding_2.png\" alt=\"Step 2\" className={screen === 2 ? 'active' : ''} />\r\n        <img src=\"/Assets/onboarding_3.png\" alt=\"Step 3\" className={screen === 3 ? 'active' : ''} />\r\n        <img src=\"/Assets/onboarding_4.png\" alt=\"Step 4\" className={screen === 4 ? 'active' : ''} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const nextScreen = () => {\r\n    setFade(false); // Trigger fade out\r\n\r\n    setTimeout(() => {\r\n      setScreen(screen => (screen === 4 ? 1 : screen + 1));\r\n      setFade(true); // Trigger fade in\r\n    }, 500); // This duration should match the CSS transition duration\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFade(true);\r\n  }, []);\r\n\r\n  const [screenText, setScreenText] = useState('🌟 Your Personalized Engagement Hub \\n\\nStep into a world where your dashboard becomes the nerve center of connection. Watch your community interactions come alive, tailored by a system that learns to speak in your voice.');\r\n  const [selectedButton, setSelectedButton] = useState(1); // Default to the first button\r\n  const updateScreenText = (newText, buttonNumber) => {\r\n    setScreenText(newText);\r\n    setSelectedButton(buttonNumber);\r\n  };\r\n\r\n  const [showSkipText, setShowSkipText] = useState(false);\r\n  const [skipPressed, setSkipPressed] = useState(false);\r\n  const handleTwitterConnect = () => {\r\n    window.location.href = `${window.location.origin}/login/twitter`;\r\n  };\r\n\r\n  useEffect(() => { \r\n    const isTwitterLoginSuccess = () => {\r\n      const urlSearchParams = new URLSearchParams(window.location.search);\r\n      const twitterLoginSuccess = urlSearchParams.get('twitter_login_success');\r\n      return twitterLoginSuccess === 'true';\r\n    };\r\n    if (isTwitterLoginSuccess() === true) {\r\n      setScreen(3);\r\n    }\r\n  }, []);\r\n  \r\n  const [bio, setBio] = useState('');\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n  \r\n    try {\r\n      const response = await axios.post('/setup', { \r\n        bio: bio,\r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        console.log('Bio sent successfully');\r\n      } else {\r\n        console.log('Failed to send bio');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      console.log('Failed to send bio');\r\n    }\r\n  };\r\n  \r\n  \r\n  const renderScreen = () => {\r\n    return (\r\n      <div className={`content-onb ${fade ? 'fade-in' : 'fade-out'}`}>\r\n        {(() => {\r\n          switch (screen) {\r\n            case 1:\r\n              return (\r\n              <>\r\n              <div className='content-onb'>\r\n                <h1><span style={{ color: 'white' }}>Introducing</span> <span style={{ color: 'red' }}>SuperpowerDM</span></h1>\r\n                  <div className=\"text-container\">\r\n                    <p>{screenText}</p>\r\n                    {selectedButton === 6 && (\r\n                        <button className='nextButton' onClick={nextScreen}>\r\n                          Next ➡\r\n                        </button>\r\n                      )}\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <div className=\"button-container\">\r\n                      <button \r\n                        className={`onboarding-button ${selectedButton === 1 ? 'selected' : ''}`} \r\n                        onClick={() => updateScreenText('🌟 Your Personalized Engagement Hub\\n\\nStep into a world where your dashboard becomes the nerve center of connection. Watch your community interactions come alive, tailored by a system that learns to speak in your voice.', 1)}\r\n                      >\r\n                      </button>\r\n                      <button \r\n                        className={`onboarding-button ${selectedButton === 2 ? 'selected' : ''}`} \r\n                        onClick={() => updateScreenText('🤖 AI-Powered Drafts, Uniquely You\\n\\nSuperpowerDM isnt just smart; its intuitive. Our advanced language model trains to match your unique communication style, drafting replies that sound authentically you.', 2)}\r\n                      >\r\n                      </button>\r\n                      <button \r\n                        className={`onboarding-button ${selectedButton === 3 ? 'selected' : ''}`} \r\n                        onClick={() => updateScreenText('🎨 Crafted Replies, Curated by You\\n\\nYour voice, your rules. Set the tone and let SuperpowerDM propose responses that echo your personal touch. Review, tweak, and send messages that truly represent your brand.', 3)}\r\n                      >\r\n                      </button>\r\n                      <button \r\n                        className={`onboarding-button ${selectedButton === 4 ? 'selected' : ''}`} \r\n                        onClick={() => updateScreenText('👥 Engage with Precision\\n\\nTarget the comments that align with your brands vision. Whether its a heartfelt thank you or a witty reply to a question, your drafts are ready for your magic touch.', 4)}\r\n                      >\r\n                      </button>\r\n                      <button \r\n                        className={`onboarding-button ${selectedButton === 5 ? 'selected' : ''}`} \r\n                        onClick={() => updateScreenText('🛠️ Tailor Your Engagement Strategy\\n\\nCustomize the criteria for your automated replies—whether its engaging your most loyal followers or acknowledging the early birds. Your SuperpowerDM learns and adapts to your preferences.', 5)}\r\n                      >\r\n                      </button>\r\n                      <button \r\n                        className={`onboarding-button ${selectedButton === 6 ? 'selected' : ''}`} \r\n                        onClick={() => updateScreenText('🌱 Nurture Your Digital Ecosystem\\n\\nYour content is the seed of your community. With SuperpowerDM, you have the power to cultivate lasting relationships, one personalized message at a time.', 6)}\r\n                      >\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Add more content specific to Screen 1 here */}\r\n              </>\r\n            );\r\n            case 2:\r\n              return (\r\n                <div className='content-onb'>\r\n                  <h1>Connect X Account</h1>\r\n                  <div className={`skip-text ${showSkipText ? 'show' : ''}`}>\r\n                    <p>Linking your X account allows SuperpowerDM to draft messages that truly sound like you - which is where the magic happens. This step is optional but it’s key for precision and authenticity in your replies and DMs.</p>\r\n                  </div>\r\n                  <div className=\"button-container2\">\r\n                    <button className=\"connect-button\" onClick={handleTwitterConnect}>\r\n                      <FontAwesomeIcon icon={faXTwitter} />\r\n                      Connect X\r\n                    </button>\r\n                    <button \r\n                      className=\"skip-button\" \r\n                      onClick={() => {\r\n                        if (!skipPressed) {\r\n                          setShowSkipText(true);\r\n                          setSkipPressed(true);\r\n                        } else {\r\n                          nextScreen();\r\n                        }\r\n                      }}\r\n                    >\r\n                      Skip Now\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            case 3:\r\n              return (\r\n                <>\r\n                  <div className='bio-content'>\r\n                    <h1>Tell us about yourself</h1>\r\n                    <div className=\"text-container2\">\r\n                      <p>Please type in or paste your current social media bio below. This helps SuperpowerDM grasp the essence of your online persona, ensuring the messages we draft resonate with your unique voice and style.</p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmit}>\r\n                      <textarea \r\n                        className=\"bio-input\" \r\n                        placeholder=\"Enter your bio here...\" \r\n                        value={bio}\r\n                        onChange={(e) => setBio(e.target.value)}\r\n                      />\r\n                      <div className=\"button-row2\">\r\n                        <p className=\"tip-text\">Tip: The more authentic your bio, the better SuperpowerDM can mirror your communication style. This information is kept private and is solely used to enhance your messaging experience.</p>\r\n                        <div className=\"button-container3\">\r\n                          <button className=\"submit-button\" type=\"submit\" onClick={nextScreen}>Submit</button>\r\n                          <button className=\"skip-button\" type=\"button\" onClick={nextScreen}>Skip step</button>\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </>\r\n              ); \r\n            case 4:\r\n              return (\r\n                <>\r\n                  <div className='content2'>\r\n                    <h1>Using SuperpowerDM - Quick Guide</h1>\r\n                    <iframe style={{margin: 'auto', alignSelf: 'center', display: 'block', borderRadius: '10px', borderColor: '#D37200'}}\r\n                      width=\"525\" \r\n                      height=\"315\" \r\n                      src=\"https://www.youtube.com/embed/xvFZjo5PgG0?si=7w50y5F2Xx7wJk0h\" \r\n                      title=\"YouTube video player\" \r\n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\">\r\n                    </iframe>\r\n                    <button className='submit-button' onClick={() => {\r\n                      navigate(`/home`);\r\n                    }}>\r\n                      Go to Dashboard\r\n                    </button>\r\n                    {/* Add more content specific to Screen 2 here */}\r\n                  </div>\r\n                </>\r\n              );  \r\n            default:\r\n              return null;\r\n          }\r\n        })()}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"onboarding\">\r\n      {renderProgressBar()}\r\n      <div className={`content-onb ${fade ? 'fade-in' : 'fade-out'}`}>\r\n      {renderScreen(screen)}\r\n      </div>\r\n      <img className='bottom-img' src=\"/Assets/blackFullLogo.png\" alt=\"Superpower Logo\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OnBoarding;","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\Login.js",["43","44","45","46"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Login.css';\r\n\r\nfunction LoginScreen() {\r\n  const navigate = useNavigate();\r\n\r\n  const [showLogin, setShowLogin] = useState(true);\r\n  const [contentClass, setContentClass] = useState('fade-in');\r\n  const [fbLoaded, setFbLoaded] = useState(false);\r\n\r\n  const handleLoginClick = () => {\r\n    setContentClass('fade-out');\r\n    setTimeout(() => {\r\n      setShowLogin(false);\r\n      setContentClass('fade-in');\r\n    }, 500); // Match this with your CSS transition time\r\n  };\r\n\r\n  useEffect(() => {\r\n    (function (d, s, id) {\r\n      var js, fjs = d.getElementsByTagName(s)[0];\r\n      if (d.getElementById(id)) return;\r\n      js = d.createElement(s); js.id = id;\r\n      js.src = 'https://connect.facebook.net/en_US/sdk.js';\r\n      fjs.parentNode.insertBefore(js, fjs);\r\n    }(document, 'script', 'facebook-jssdk'));\r\n\r\n    const checkFB = setInterval(() => {\r\n      if (window.FB) {\r\n        window.FB.init({\r\n          appId: '1079236933072082',\r\n          autoLogAppEvents: true,\r\n          xfbml: true,\r\n          version: 'v18.0',\r\n          config_id  : '289617444052184'\r\n        });\r\n\r\n        window.FB.getLoginStatus(function (response) {\r\n          statusChangeCallback(response);\r\n        });\r\n\r\n        setFbLoaded(true);\r\n        clearInterval(checkFB);\r\n      }\r\n    }, 1000); // Check every second\r\n\r\n    return () => clearInterval(checkFB); // Clean up on unmount\r\n  }, []);\r\n\r\n  const facebookBusinessLogin = () => {\r\n    if (!fbLoaded) {\r\n      console.log('FB SDK not loaded yet.');\r\n      return;\r\n    }\r\n\r\n    window.FB.login(function (response) {\r\n      if (response.authResponse) {\r\n        console.log('You are now logged in.');\r\n        var accessToken = response.authResponse.accessToken;\r\n        statusChangeCallback(response, accessToken);\r\n      } else {\r\n        console.log('User cancelled login or did not fully authorize.');\r\n      }\r\n    }, \r\n    { \r\n      scope: 'email',\r\n    });\r\n  };\r\n\r\n  // send the response to the server\r\n  const sendResponseToServer = (fbResponse, accessToken) => {\r\n    axios.post('/login', { \r\n      fbResponse: fbResponse, \r\n      accessToken: accessToken \r\n    })\r\n    .then(response => {\r\n      const data = response.data;\r\n      if (data.success && data.redirect) {\r\n          // Redirect to the setup page\r\n          window.location.href = data.redirect;\r\n      } else {\r\n          // Handle login failure\r\n          console.error('Login failed:', data.message);\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n  };  \r\n\r\n  const statusChangeCallback = (response, accessToken) => {\r\n    if (response.status === 'connected') {\r\n      console.log('Welcome! Fetching your information.... ');\r\n      window.FB.api('/me', function (userResponse) {\r\n        console.log('Successful login for: ' + userResponse.name);\r\n        sendResponseToServer(userResponse, accessToken);\r\n      });\r\n    } else {\r\n      console.log('Please log in to Facebook.');\r\n    }\r\n  };\r\n\r\n  const facebookLogout = () => {\r\n    if (window.FB) {\r\n      window.FB.logout(function(response) {\r\n        // Handle the response, such as updating the state to reflect the user's logout\r\n        console.log(\"User logged out of Facebook\");\r\n        // Additional actions post-logout can be placed here\r\n      });\r\n    } else {\r\n      console.log(\"Facebook SDK not loaded yet.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"outer-container\">\r\n      {showLogin ? (\r\n        <div className={`login-screen ${contentClass}`}>\r\n          <img src=\"Assets/colourFullLogo.png\" alt=\"Logo\" className=\"centered-image\" />\r\n          <h2>Helping Creators Maximize Follower-Engagement with AI</h2>\r\n          <button className=\"login-button\" onClick={handleLoginClick}>Log In</button>\r\n          <button className=\"register-button\" onClick={() => window.open('https://docs.google.com/forms/d/e/1FAIpQLSdodkpVCh7FBhW4Scf0kHRJmmaBR2dklR2W96kO6MjEFVolrg/viewform', '_blank')}>\r\n            Request Access\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className={`new-content ${contentClass}`}>\r\n          <h1>Welcome</h1>\r\n          <h2>SuperpowerDM is presently only available to invited users. Please click below if you are pre-approved.</h2>\r\n          <div>\r\n            <button onClick={facebookLogout} className=\"logout-button\">\r\n              Log Out of Facebook\r\n            </button>    \r\n          </div>\r\n          {fbLoaded && (\r\n            <button className=\"fb-login-button\" onClick={facebookBusinessLogin}>\r\n              <i className=\"fab fa-facebook-square\"></i> Continue with Facebook\r\n            </button>\r\n          )}\r\n          <img src=\"Assets/whiteFullLogo.png\" alt=\"Small Image\" className=\"bottom-image\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","C:\\Users\\riadd\\Documents\\GitHub\\SuperpowerDM\\frontend\\superpowerdm\\src\\Components\\cards.js",["47","48","49","50","51","52","53","54"],[],{"ruleId":"55","severity":1,"message":"56","line":10,"column":10,"nodeType":"57","messageId":"58","endLine":10,"endColumn":14},{"ruleId":"55","severity":1,"message":"59","line":10,"column":16,"nodeType":"57","messageId":"58","endLine":10,"endColumn":23},{"ruleId":"55","severity":1,"message":"60","line":11,"column":11,"nodeType":"57","messageId":"58","endLine":11,"endColumn":17},{"ruleId":"55","severity":1,"message":"61","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":19},{"ruleId":"55","severity":1,"message":"62","line":8,"column":9,"nodeType":"57","messageId":"58","endLine":8,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":51,"column":6,"nodeType":"65","endLine":51,"endColumn":8,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":143,"column":11,"nodeType":"69","endLine":143,"endColumn":92},{"ruleId":"55","severity":1,"message":"70","line":101,"column":10,"nodeType":"57","messageId":"58","endLine":101,"endColumn":27},{"ruleId":"55","severity":1,"message":"71","line":101,"column":29,"nodeType":"57","messageId":"58","endLine":101,"endColumn":49},{"ruleId":"55","severity":1,"message":"72","line":123,"column":10,"nodeType":"57","messageId":"58","endLine":123,"endColumn":19},{"ruleId":"55","severity":1,"message":"73","line":123,"column":21,"nodeType":"57","messageId":"58","endLine":123,"endColumn":33},{"ruleId":"55","severity":1,"message":"74","line":337,"column":12,"nodeType":"57","messageId":"58","endLine":337,"endColumn":29},{"ruleId":"55","severity":1,"message":"75","line":337,"column":31,"nodeType":"57","messageId":"58","endLine":337,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":551,"column":13,"nodeType":"69","endLine":551,"endColumn":69},{"ruleId":"76","severity":1,"message":"77","line":567,"column":17,"nodeType":"69","endLine":567,"endColumn":68},"no-unused-vars","'fade' is assigned a value but never used.","Identifier","unusedVar","'setFade' is assigned a value but never used.","'userID' is assigned a value but never used.","'useParams' is defined but never used.","'navigate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'statusChangeCallback'. Either include it or remove the dependency array.","ArrayExpression",["78"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'displayedComments' is assigned a value but never used.","'setDisplayedComments' is assigned a value but never used.","'countdown' is assigned a value but never used.","'setCountdown' is assigned a value but never used.","'generatedResponse' is assigned a value but never used.","'setGeneratedResponse' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"79","fix":"80"},"Update the dependencies array to be: [statusChangeCallback]",{"range":"81","text":"82"},[1566,1568],"[statusChangeCallback]"]