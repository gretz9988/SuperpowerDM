{"ast":null,"code":"import React from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";const fetchMedia=async()=>{try{const response=await fetch('/fetch_media',{method:'POST',headers:{'Content-Type':'application/json'}// If you need to send a body, use:\n// body: JSON.stringify({ key: 'value' })\n});if(!response.ok){throw new Error(\"HTTP error! Status: \".concat(response.status));}const data=await response.json();console.log(data);// Handle your data here\n}catch(error){console.error('Error fetching media:',error);}};const defaultData=[];const CardComponent=_ref=>{let{data=[],maxCards}=_ref;// Check if data is empty, and if so, use defaultData\nconst effectiveData=data.length===0?defaultData:data;// Determine the number of cards to display\nconst numCardsToShow=maxCards||effectiveData.length;// Slice the data to limit the number of cards if necessary\nconst limitedData=effectiveData.slice(0,numCardsToShow);// Render the component\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",children:limitedData.length>0?limitedData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"counter-box\",children:[index+1,\"/\",limitedData.length]}),/*#__PURE__*/_jsx(\"h2\",{children:\" Comments replied \"}),/*#__PURE__*/_jsx(\"button\",{className:\"circle-button\",children:/*#__PURE__*/_jsx(\"img\",{src:\"/Assets/reload.png\",className:\"reload\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-content\",children:[/*#__PURE__*/_jsx(\"img\",{src:item.imageUrl,alt:\"Post\",className:\"card-image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-text\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Post Date:\"}),/*#__PURE__*/_jsx(\"p\",{className:\"card-date\",children:item.date})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"card-button\",children:[\"Review \",limitedData.length,\" Draft Replies >\"]})]})]})]},index)):/*#__PURE__*/_jsxs(\"div\",{className:\"empty-screen\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"No content!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Your content will appear here when available.\"}),/*#__PURE__*/_jsx(\"img\",{src:\"path_to_your_image.jpg\",alt:\"Descriptive Alt Text\"}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchMedia,children:\"Get Content\"})]})});};export default CardComponent;","map":{"version":3,"names":["React","jsxs","_jsxs","jsx","_jsx","fetchMedia","response","fetch","method","headers","ok","Error","concat","status","data","json","console","log","error","defaultData","CardComponent","_ref","maxCards","effectiveData","length","numCardsToShow","limitedData","slice","className","children","map","item","index","src","imageUrl","alt","date","onClick"],"sources":["C:/Users/riadd/Documents/GitHub/SuperpowerDM/frontend/superpowerdm/src/Components/cards.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst fetchMedia = async () => {\r\n  try {\r\n      const response = await fetch('/fetch_media', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          }\r\n          // If you need to send a body, use:\r\n          // body: JSON.stringify({ key: 'value' })\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(data); // Handle your data here\r\n  } catch (error) {\r\n      console.error('Error fetching media:', error);\r\n  }\r\n};\r\n\r\nconst defaultData = [];\r\n\r\nconst CardComponent = ({ data = [], maxCards }) => {\r\n  // Check if data is empty, and if so, use defaultData\r\n  const effectiveData = data.length === 0 ? defaultData : data;\r\n\r\n  // Determine the number of cards to display\r\n  const numCardsToShow = maxCards || effectiveData.length;\r\n\r\n  // Slice the data to limit the number of cards if necessary\r\n  const limitedData = effectiveData.slice(0, numCardsToShow);\r\n\r\n  // Render the component\r\n  return (\r\n    <div className=\"card-container\">\r\n      {limitedData.length > 0 ? limitedData.map((item, index) => (\r\n        <div key={index} className=\"card\">\r\n          {/* Card Header */}\r\n          <div className=\"card-header\">\r\n            <span className=\"counter-box\">{index + 1}/{limitedData.length}</span> \r\n            <h2> Comments replied </h2>\r\n            <button className=\"circle-button\">\r\n              <img src=\"/Assets/reload.png\" className=\"reload\" />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Card Content */}\r\n          <div className=\"card-content\">\r\n            {/* Image on the left */}\r\n            <img src={item.imageUrl} alt=\"Post\" className=\"card-image\" />\r\n\r\n            {/* Text and Button on the right */}\r\n            <div className=\"card-text\">\r\n              <div>\r\n                <h4>Post Date:</h4>\r\n                <p className=\"card-date\">{item.date}</p>\r\n              </div>\r\n              <button className=\"card-button\">Review {limitedData.length} Draft Replies ></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )) : (\r\n        <div className=\"empty-screen\">\r\n          <h1>No content!</h1>\r\n          <p>Your content will appear here when available.</p>\r\n          <img src=\"path_to_your_image.jpg\" alt=\"Descriptive Alt Text\" />\r\n          <button onClick={fetchMedia}>Get Content</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}