{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\riadd\\\\Documents\\\\GitHub\\\\SuperpowerDM\\\\frontend\\\\superpowerdm\\\\src\\\\Components\\\\cards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"card\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: data.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: data.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n_c = Card;\nconst CardGrid = ({\n  data,\n  maxRows\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    if (data.length > maxRows * 2) {\n      // Remove the oldest card\n      setCards(prevCards => prevCards.slice(1));\n    }\n    setCards([...cards, ...data.slice(-maxRows * 2)]);\n  }, [data, maxRows]);\n  const gridRows = [];\n  for (let i = 0; i < cards.length; i += 2) {\n    gridRows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        data: cards[i]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        data: cards[i + 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: gridRows.map(row => row)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(CardGrid, \"M51NroWgc5aUEHiqsZiaQ+7WeWA=\");\n_c2 = CardGrid;\nexport default CardGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Card","data","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","_c","CardGrid","maxRows","_s","cards","setCards","length","prevCards","slice","gridRows","i","push","map","row","_c2","$RefreshReg$"],"sources":["C:/Users/riadd/Documents/GitHub/SuperpowerDM/frontend/superpowerdm/src/Components/cards.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Card = ({ data }) => (\r\n  <div className=\"card\">\r\n    {/* Display your card content using data */}\r\n    <h3>{data.title}</h3>\r\n    <p>{data.description}</p>\r\n  </div>\r\n);\r\n\r\nconst CardGrid = ({ data, maxRows }) => {\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > maxRows * 2) {\r\n      // Remove the oldest card\r\n      setCards((prevCards) => prevCards.slice(1));\r\n    }\r\n    setCards([...cards, ...data.slice(-maxRows * 2)]);\r\n  }, [data, maxRows]);\r\n\r\n  const gridRows = [];\r\n  for (let i = 0; i < cards.length; i += 2) {\r\n    gridRows.push(\r\n      <div className=\"row\" key={i}>\r\n        <Card data={cards[i]} />\r\n        <Card data={cards[i + 1]} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-grid\">\r\n      {gridRows.map((row) => row)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardGrid;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAK,CAAC,kBACpBF,OAAA;EAAKG,SAAS,EAAC,MAAM;EAAAC,QAAA,gBAEnBJ,OAAA;IAAAI,QAAA,EAAKF,IAAI,CAACG;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eACrBT,OAAA;IAAAI,QAAA,EAAIF,IAAI,CAACQ;EAAW;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACtB,CACN;AAACE,EAAA,GANIV,IAAI;AAQV,MAAMW,QAAQ,GAAGA,CAAC;EAAEV,IAAI;EAAEW;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAII,IAAI,CAACe,MAAM,GAAGJ,OAAO,GAAG,CAAC,EAAE;MAC7B;MACAG,QAAQ,CAAEE,SAAS,IAAKA,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7C;IACAH,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE,GAAGb,IAAI,CAACiB,KAAK,CAAC,CAACN,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;EACnD,CAAC,EAAE,CAACX,IAAI,EAAEW,OAAO,CAAC,CAAC;EAEnB,MAAMO,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACE,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;IACxCD,QAAQ,CAACE,IAAI,eACXtB,OAAA;MAAKG,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBJ,OAAA,CAACC,IAAI;QAACC,IAAI,EAAEa,KAAK,CAACM,CAAC;MAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxBT,OAAA,CAACC,IAAI;QAACC,IAAI,EAAEa,KAAK,CAACM,CAAC,GAAG,CAAC;MAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFJY,CAAC;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGtB,CACP,CAAC;EACH;EAEA,oBACET,OAAA;IAAKG,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBgB,QAAQ,CAACG,GAAG,CAAEC,GAAG,IAAKA,GAAG;EAAC;IAAAlB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAACK,EAAA,CA1BIF,QAAQ;AAAAa,GAAA,GAARb,QAAQ;AA4Bd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAc,GAAA;AAAAC,YAAA,CAAAf,EAAA;AAAAe,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}