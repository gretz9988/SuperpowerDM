{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\riadd\\\\Documents\\\\GitHub\\\\SuperpowerDM\\\\frontend\\\\superpowerdm\\\\src\\\\Components\\\\cards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"card\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: data.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: data.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n_c = Card;\nconst CardGrid = ({\n  data,\n  maxRows\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    const newCards = data.slice(-maxRows * 2);\n    setCards([...cards, ...newCards]);\n  }, [data, maxRows]);\n  const gridRows = [];\n  for (let i = 0; i < cards.length; i += 2) {\n    if (!cards.includes(cards[i + 1])) {\n      gridRows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          data: cards[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          data: cards[i + 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: gridRows.map(row => row)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CardGrid, \"M51NroWgc5aUEHiqsZiaQ+7WeWA=\");\n_c2 = CardGrid;\nexport default CardGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Card","data","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","_c","CardGrid","maxRows","_s","cards","setCards","newCards","slice","gridRows","i","length","includes","push","map","row","_c2","$RefreshReg$"],"sources":["C:/Users/riadd/Documents/GitHub/SuperpowerDM/frontend/superpowerdm/src/Components/cards.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Card = ({ data }) => (\r\n  <div className=\"card\">\r\n    {/* Display your card content using data */}\r\n    <h3>{data.title}</h3>\r\n    <p>{data.description}</p>\r\n  </div>\r\n);\r\n\r\nconst CardGrid = ({ data, maxRows }) => {\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newCards = data.slice(-maxRows * 2);\r\n    setCards([...cards, ...newCards]);\r\n  }, [data, maxRows]);\r\n\r\n  const gridRows = [];\r\n  for (let i = 0; i < cards.length; i += 2) {\r\n    if (!cards.includes(cards[i + 1])) {\r\n      gridRows.push(\r\n        <div className=\"row\" key={i}>\r\n          <Card data={cards[i]} />\r\n          <Card data={cards[i + 1]} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-grid\">\r\n      {gridRows.map((row) => row)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardGrid;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAK,CAAC,kBACpBF,OAAA;EAAKG,SAAS,EAAC,MAAM;EAAAC,QAAA,gBAEnBJ,OAAA;IAAAI,QAAA,EAAKF,IAAI,CAACG;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eACrBT,OAAA;IAAAI,QAAA,EAAIF,IAAI,CAACQ;EAAW;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACtB,CACN;AAACE,EAAA,GANIV,IAAI;AAQV,MAAMW,QAAQ,GAAGA,CAAC;EAAEV,IAAI;EAAEW;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMmB,QAAQ,GAAGf,IAAI,CAACgB,KAAK,CAAC,CAACL,OAAO,GAAG,CAAC,CAAC;IACzCG,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE,GAAGE,QAAQ,CAAC,CAAC;EACnC,CAAC,EAAE,CAACf,IAAI,EAAEW,OAAO,CAAC,CAAC;EAEnB,MAAMM,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACxC,IAAI,CAACL,KAAK,CAACO,QAAQ,CAACP,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;MACjCD,QAAQ,CAACI,IAAI,eACXvB,OAAA;QAAKG,SAAS,EAAC,KAAK;QAAAC,QAAA,gBAClBJ,OAAA,CAACC,IAAI;UAACC,IAAI,EAAEa,KAAK,CAACK,CAAC;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxBT,OAAA,CAACC,IAAI;UAACC,IAAI,EAAEa,KAAK,CAACK,CAAC,GAAG,CAAC;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAFJW,CAAC;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGtB,CACP,CAAC;IACH;EACF;EAEA,oBACET,OAAA;IAAKG,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBe,QAAQ,CAACK,GAAG,CAAEC,GAAG,IAAKA,GAAG;EAAC;IAAAnB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAACK,EAAA,CAzBIF,QAAQ;AAAAc,GAAA,GAARd,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}